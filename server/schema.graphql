scalar DateTime

type User {
  id: ID!
  username: String
  creationDate: DateTime
}

type Track {
  id: ID!
  name: String
  artist: String
  album: String
  storageLocation: String
}

type Playlist {
  id: ID!
  name: String
  description: String
  creationDate: DateTime
  tracks: [Track]
  owner: User
}

type Query {
  playlists: [Playlist]
  playlist(id: ID!): Playlist
  user(id: ID!): User
  users: [User]
  tracks: [Track]
  track(id: ID!): Track
}

type Mutation {
  createTrack(name: String!, artist: String!, album: String!, storageLocation: String!): Track
  updateTrackName(id: ID!, name: String!): Track
  updateTrackArtist(id: ID!, artist: String!): Track
  updateTrackAlbum(id: ID!, album: String!): Track
  updateTrackStorageLocation(id: ID!, storageLocation: String!): Track
  deleteTrack(id: ID!): Track
  createPlaylist(name: String!, description: String!, owner: ID!): Playlist
  updatePlaylistName(id: ID!, name: String!): Playlist
  updatePlaylistDescription(id: ID!, description: String!): Playlist
  updatePlaylistOwner(id: ID!, owner: ID!): Playlist
  addTrackToPlaylist(playlistId: ID!, trackId: ID!): Playlist
  removeTrackFromPlaylist(playlist_id: ID!, track_id: ID!): Playlist
  deletePlaylist(id: ID!): Playlist
  createUser(username: String!): User
  updateUserUsername(id: ID!, username: String!): User
  deleteUser(id: ID!): User
}
